
//! Autogenerated weights for `pallet_template`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `salman`, CPU: `Intel(R) Core(TM) i5-8350U CPU @ 1.70GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.wasm
// --pallet
// pallet-template
// --extrinsic
// 
// --template
// ./pallets/benchmarking/frame-weight-template.hbs
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_template`.
pub trait WeightInfo {
	fn list_nft_for_auction() -> Weight;
	fn place_bid() -> Weight;
	fn resolve_auction() -> Weight;
	fn set_fee_percentage() -> Weight;
	fn on_initialize() -> Weight;
}

/// Weights for `pallet_template` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:1 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::Auctions` (r:0 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn list_nft_for_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `3966`
		// Minimum execution time: 72_394_000 picoseconds.
		Weight::from_parts(104_852_000, 3966)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Template::Auctions` (r:1 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Template::Bids` (r:1 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn place_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `247`
		//  Estimated: `3712`
		// Minimum execution time: 81_080_000 picoseconds.
		Weight::from_parts(110_677_000, 3712)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Template::Auctions` (r:1 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::FeePercentage` (r:1 w:0)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Template::AccumulatedFees` (r:1 w:1)
	/// Proof: `Template::AccumulatedFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Account` (r:0 w:2)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::ItemPriceOf` (r:0 w:1)
	/// Proof: `Uniques::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:0 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Template::Bids` (r:0 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn resolve_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `844`
		//  Estimated: `6196`
		// Minimum execution time: 265_148_000 picoseconds.
		Weight::from_parts(348_424_000, 6196)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `Template::FeePercentage` (r:0 w:1)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_fee_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_842_000 picoseconds.
		Weight::from_parts(23_859_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Template::Auctions` (r:2 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::FeePercentage` (r:1 w:0)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Template::AccumulatedFees` (r:1 w:1)
	/// Proof: `Template::AccumulatedFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Account` (r:0 w:2)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::ItemPriceOf` (r:0 w:1)
	/// Proof: `Uniques::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:0 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Template::Bids` (r:0 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `844`
		//  Estimated: `6784`
		// Minimum execution time: 292_041_000 picoseconds.
		Weight::from_parts(374_958_000, 6784)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:1 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::Auctions` (r:0 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn list_nft_for_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `501`
		//  Estimated: `3966`
		// Minimum execution time: 72_394_000 picoseconds.
		Weight::from_parts(104_852_000, 3966)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Template::Auctions` (r:1 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Template::Bids` (r:1 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn place_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `247`
		//  Estimated: `3712`
		// Minimum execution time: 81_080_000 picoseconds.
		Weight::from_parts(110_677_000, 3712)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Template::Auctions` (r:1 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::FeePercentage` (r:1 w:0)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Template::AccumulatedFees` (r:1 w:1)
	/// Proof: `Template::AccumulatedFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Account` (r:0 w:2)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::ItemPriceOf` (r:0 w:1)
	/// Proof: `Uniques::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:0 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Template::Bids` (r:0 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn resolve_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `844`
		//  Estimated: `6196`
		// Minimum execution time: 265_148_000 picoseconds.
		Weight::from_parts(348_424_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: `Template::FeePercentage` (r:0 w:1)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_fee_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_842_000 picoseconds.
		Weight::from_parts(23_859_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Template::Auctions` (r:2 w:1)
	/// Proof: `Template::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Asset` (r:1 w:1)
	/// Proof: `Uniques::Asset` (`max_values`: None, `max_size`: Some(122), added: 2597, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::Class` (r:1 w:0)
	/// Proof: `Uniques::Class` (`max_values`: None, `max_size`: Some(178), added: 2653, mode: `MaxEncodedLen`)
	/// Storage: `Template::FeePercentage` (r:1 w:0)
	/// Proof: `Template::FeePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Template::AccumulatedFees` (r:1 w:1)
	/// Proof: `Template::AccumulatedFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Uniques::Account` (r:0 w:2)
	/// Proof: `Uniques::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Uniques::ItemPriceOf` (r:0 w:1)
	/// Proof: `Uniques::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Template::InAuction` (r:0 w:1)
	/// Proof: `Template::InAuction` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Template::Bids` (r:0 w:1)
	/// Proof: `Template::Bids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `844`
		//  Estimated: `6784`
		// Minimum execution time: 292_041_000 picoseconds.
		Weight::from_parts(374_958_000, 6784)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
}
